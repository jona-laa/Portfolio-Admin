"use strict";var fetchAndCreate=function(e,t){fetch(e).then(function(e){return e.json()}).then(function(e){return t(e)}).catch(function(e){return console.error(e)})},updateOrAdd=function(e,t,n,i,o){e.preventDefault(),t?updatePost(t,n,i,o):addPost(n,i,o)},addPost=function(t,e,n){fetch(t,{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify(e())}).then(function(e){return e.json()}).then(function(e){return userFeedback(e,".feedback","#feedback-message")}).then(function(e){return resetForm()}).then(function(e){return fetchAndCreate(t,n)}).catch(function(e){return console.error(e)})},updatePost=function(e,t,n,i){fetch(t,{method:"PUT",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify(n(e))}).then(function(e){return e.json()}).then(function(e){return userFeedback(e,".feedback","#feedback-message")}).then(function(e){return resetForm()}).then(function(e){return fetchAndCreate(t,i)}).catch(function(e){return console.error(e)})},deletePost=function(e,t,n){confirmIt("delete post")&&fetch(t,{method:"DELETE",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify({token:seshToken,id:e})}).then(function(e){return e.json()}).then(function(e){return userFeedback(e,".feedback","#feedback-message")}).then(function(e){return resetForm()}).then(function(e){return fetchAndCreate(t,n)}).catch(function(e){return console.error(e)})};window.onscroll=function(){hideMenu(),hideToTopBtn()};var elementToggle=function(e,t,n){return"top"===t?e.style.top=n:e.style.bottom=n},elementDisplay=function(e,t){return e.style.display=t},prevScrollpos=window.pageYOffset,hideMenu=function(){var e=window.pageYOffset;elementToggle(header,"top",e<prevScrollpos?"0":"-80px"),elementDisplay(mainMenu,"none"),window.pageYOffset>window.screen.height-300?header.style.background="rgba(0, 0, 0, 0.5)":header.style.background="transparent",prevScrollpos=e},hideToTopBtn=function(){window.pageYOffset>window.screen.height?elementToggle(toTopBtn,"bottom","20px"):elementToggle(toTopBtn,"bottom","-50px")};$("#main-menu-toggle").click(function(){$(".main-menu ul").slideToggle(300,function(){})}),$("#menu-main-menu a, .btn, .arrow-link").on("click",function(e){if(""!==this.hash){e.preventDefault();var t=this.hash;$("html, body").animate({scrollTop:$(t).offset().top},800)}});var feedbackDiv,feedbackMessage,editForm,updateId,inputAboutHeading,inputAboutImage,inputAboutBio,inputAboutPublished,inputPortfolioTitle,inputPortfoliUrl,inputPortfolioDescr,inputPortfolioImage,inputSkillsSkill,inputSkillsIcon,inputStudiesTitle,inputStudiesInstitution,inputStudiesStart,inputStudiesEnd,inputStudiesDescr,inputWorkCompany,inputWorkTitle,inputWorkStart,inputWorkEnd,inputWorkDescr,header=document.querySelector(".header-content"),toTopBtn=document.querySelector("#goTop"),mainMenu=document.querySelector("#menu-main-menu"),editItemsContainer=document.querySelector("#edit-items_container"),editSection=document.querySelector("#edit"),aboutUrl="http://studenter.miun.se/~jola1803/dt173g/portfolio/api/bio.php",skillsUrl="http://studenter.miun.se/~jola1803/dt173g/portfolio/api/skills.php",workUrl="http://studenter.miun.se/~jola1803/dt173g/portfolio/api/jobs.php",studiesUrl="http://studenter.miun.se/~jola1803/dt173g/portfolio/api/courses.php",portfolioUrl="http://studenter.miun.se/~jola1803/dt173g/portfolio/api/projects.php",resetDOM=function(){updateId=null,editItemsContainer.innerHTML=""},cancelForm=function(e){e.preventDefault(),confirmIt("cancel")&&resetForm()},resetForm=function(){updateId=null,editForm.reset()},confirmIt=function(e){return window.confirm("Sure you want to ".concat(e,"?"))},userFeedback=function(e,t,n){feedbackDiv=document.querySelector(t),(feedbackMessage=document.querySelector(n)).textContent=e.message;var i=e.code;feedbackDiv.style.backgroundColor=201==i|200==i?"#539662":"rgb(182, 81, 77)",fadeInElement(feedbackDiv,500),fadeOutElement(1e3,4e3,feedbackDiv)},fadeInElement=function(e,t){$(e).fadeIn(t,function(){})},fadeOutElement=function(t,n){for(var e=arguments.length,i=new Array(2<e?e-2:0),o=2;o<e;o++)i[o-2]=arguments[o];i.forEach(function(e){setTimeout(function(){$(e).fadeOut(t,function(){})},n)})},aboutItemHtml=function(e,t,n,i,o){return'\n  <div class="about-container">\n\n  <div class="avatar-container">\n  <div class="avatar" style="background: url(\''.concat(i,"') no-repeat center center/cover\"></div>\n  </div>\n\n  <div>\n  <div>\n  <h3>").concat(t,"</h3>\n  <p>").concat(n,"</p>\n  <p>Published: ").concat(0==o?"No":"Yes",'</p>\n  </div>\n  </div>\n\n  </div>\n\n  <div class="edit-items_controls">\n  <button class="btn delete" id="delete-').concat(e,'" value="delete" onclick="deletePost(').concat(e,', aboutUrl, createBio)"><i class="fas fa-trash-alt fa-1x"></i></button>\n  <button class="btn update" id="update-').concat(e,'" value="update" onclick="initAboutUpdate(').concat(e,')"><i class="fas fa-edit fa-1x"></i></button>\n  </div>\n')},aboutFetchObject=function(e){return e?{token:seshToken,id:e,heading:inputAboutHeading.value,img_src:inputAboutImage.value,bio:inputAboutBio.value,published:inputAboutPublished.checked?1:0}:{token:seshToken,heading:inputAboutHeading.value,img_src:inputAboutImage.value,bio:inputAboutBio.value,published:inputAboutPublished.checked?1:0}},initAboutUpdate=function(t){updateId=t;var e=JSON.parse(localStorage.about).findIndex(function(e){return e.id==t}),n=JSON.parse(localStorage.about)[e],i=n.heading,o=n.bio,r=n.img_src,a=n.published;inputAboutHeading.value=i,inputAboutBio.value=o,inputAboutImage.value=r,inputAboutPublished.checked=1==a,window.scrollTo(0,document.body.scrollHeight)},aboutFormHtml=function(){return'\n      <form id="edit-form">\n        <div>\n          <input type="text" name="heading" id="heading" placeholder="Heading" required>\n          <label for="heading">Heading</label>\n        </div>\n        <div>\n          <input type="text" name="image" id="image" placeholder="Image Src" required>\n          <label for="image">Image</label>\n        </div>\n        <div class="textarea">\n          <textarea id="bio" placeholder="About Text" required></textarea>\n          <label for="bio">About Me</label>\n        </div>\n        <div class="form_checkbox">\n          <input type="checkbox" id="published" name="published">\n          <label for="published">Publish?</label>\n        </div>\n        <div class="form_buttons">\n          <input type="submit" value="Cancel" id="submit" class="btn" onclick="cancelForm(event)">\n          <input type="submit" value="Submit" id="submit" class="btn" onclick="updateOrAdd(event, updateId, aboutUrl, aboutFetchObject, createBio)"> \n        </div>\n        </form>\n  '},createBio=function(e){resetDOM(),editItemsContainer.classList.remove("trio");var t=e.bios;localStorage.about=JSON.stringify(t),t.forEach(function(e){editItemsContainer.innerHTML+=aboutItemHtml(e.id,e.heading,e.bio,e.img_src,e.published)}),editSection.innerHTML=aboutFormHtml(),inputAboutHeading=document.querySelector("#heading"),inputAboutImage=document.querySelector("#image"),inputAboutBio=document.querySelector("#bio"),inputAboutPublished=document.querySelector("#published"),editForm=document.querySelector("#edit-form")},createSkills=function(e){resetDOM(),editItemsContainer.classList.remove("trio");var t=e.skills;localStorage.skills=JSON.stringify(t),t.forEach(function(e){editItemsContainer.innerHTML+=skillsHtml(e.id,e.skill,e.icon)}),editSection.innerHTML=skillsFormHtml(),inputSkillsSkill=document.querySelector("#skill"),inputSkillsIcon=document.querySelector("#icon"),editForm=document.querySelector("#edit-form")},createWork=function(e){resetDOM();var t=e.jobs;editItemsContainer.classList.add("trio"),localStorage.jobs=JSON.stringify(t),t.forEach(function(e){editItemsContainer.innerHTML+=workHtml(e.id,e.company,e.title,e.date_start,e.date_end,e.descr)}),editSection.innerHTML=workFormHtml(),inputWorkCompany=document.querySelector("#company"),inputWorkTitle=document.querySelector("#title"),inputWorkStart=document.querySelector("#start-date"),inputWorkEnd=document.querySelector("#end-date"),inputWorkDescr=document.querySelector("#descr"),editForm=document.querySelector("#edit-form")},createStudies=function(e){resetDOM();var t=e.courses;editItemsContainer.classList.add("trio"),localStorage.courses=JSON.stringify(t),t.forEach(function(e){editItemsContainer.innerHTML+=studiesHtml(e.id,e.title,e.institution,e.date_start,e.date_end,e.descr)}),editSection.innerHTML=studiesFormHtml(),inputStudiesTitle=document.querySelector("#title"),inputStudiesInstitution=document.querySelector("#institution"),inputStudiesStart=document.querySelector("#start-date"),inputStudiesEnd=document.querySelector("#end-date"),inputStudiesDescr=document.querySelector("#descr"),editForm=document.querySelector("#edit-form")},createPortfolio=function(e){resetDOM();var t=e.projects;editItemsContainer.classList.add("trio"),localStorage.projects=JSON.stringify(t),t.forEach(function(e){editItemsContainer.innerHTML+=portfolioHtml(e.id,e.title,e.prj_url,e.descr,e.img_src)}),editSection.innerHTML=portfolioFormHtml(),inputPortfolioTitle=document.querySelector("#title"),inputPortfoliUrl=document.querySelector("#url"),inputPortfolioDescr=document.querySelector("#descr"),inputPortfolioImage=document.querySelector("#image"),editForm=document.querySelector("#edit-form")},portfolioHtml=function(e,t,n,i,o){return'\n      \n      <div class="portfolio-item">\n        <img src="'.concat(o,'" alt="" />\n        <h3>').concat(t,'</h3>\n        <a href="').concat(n,'" target="_blank">').concat(n,"</a>\n        <p>").concat(i,'</p>\n\n        <div class="edit-items_controls">\n          <button class="btn delete" id="delete-').concat(e,'" value="delete" onclick="deletePost(').concat(e,', portfolioUrl, createPortfolio)"><i class="fas fa-trash-alt fa-1x"></i></button>\n          <button class="btn update" id="update-').concat(e,'" value="update" onclick="initPortfolioUpdate(').concat(e,')"><i class="fas fa-edit fa-1x"></i></button>\n        </div>\n      </div>\n    ')},portfolioFetchObject=function(e){return e?{token:seshToken,id:e,title:inputPortfolioTitle.value,prj_url:inputPortfoliUrl.value,descr:inputPortfolioDescr.value,img_src:inputPortfolioImage.value}:{token:seshToken,title:inputPortfolioTitle.value,prj_url:inputPortfoliUrl.value,descr:inputPortfolioDescr.value,img_src:inputPortfolioImage.value}},initPortfolioUpdate=function(t){updateId=t;var e=JSON.parse(localStorage.projects).findIndex(function(e){return e.id==t}),n=JSON.parse(localStorage.projects)[e],i=n.title,o=n.prj_url,r=n.descr,a=n.img_src;inputPortfolioTitle.value=i,inputPortfoliUrl.value=o,inputPortfolioDescr.value=r,inputPortfolioImage.value=a,window.scrollTo(0,document.body.scrollHeight)},portfolioFormHtml=function(){return'\n      <form id="edit-form">\n        <div>\n          <input type="text" name="title" id="title" placeholder="Title" required>\n          <label for="title">Title</label>\n        </div>\n        <div>\n          <input type="text" name="url" id="url" placeholder="Url" required>\n          <label for="url">Url</label>\n        </div>\n        <div>\n          <input type="text" name="descr" id="descr" placeholder="Description" required>\n          <label for="descr">Description</label>\n        </div>\n        <div>\n          <input type="text" name="image" id="image" placeholder="Image" required>\n          <label for="image">Image</label>\n        </div>\n        <div class="form_buttons">\n          <input type="submit" value="Cancel" id="submit" class="btn" onclick="cancelForm(event)">\n          <input type="submit" value="Submit" id="submit" class="btn" onclick="updateOrAdd(event, updateId, portfolioUrl, portfolioFetchObject, createPortfolio)"> \n        </div>\n      </form>\n  '},skillsHtml=function(e,t,n){return'\n      <div class="skill">\n        <i class="'.concat(n,' fa-3x"></i>\n        <span>').concat(t,'</span>\n\n        <button class="btn delete" id="delete-').concat(e,'" value="delete" onclick="deletePost(').concat(e,', skillsUrl, createSkills)"><i class="fas fa-trash-alt fa-1x"></i></button>\n        <button class="btn update" id="update-').concat(e,'" value="update" onclick="initSkillsUpdate(').concat(e,')"><i class="fas fa-edit fa-1x"></i></button>\n      </div>\n      \n    ')},skillsFetchObject=function(e){return e?{token:seshToken,id:e,skill:inputSkillsSkill.value,icon:inputSkillsIcon.value}:{token:seshToken,skill:inputSkillsSkill.value,icon:inputSkillsIcon.value}},initSkillsUpdate=function(t){updateId=t;var e=JSON.parse(localStorage.skills).findIndex(function(e){return e.id==t}),n=JSON.parse(localStorage.skills)[e],i=n.skill,o=n.icon;inputSkillsSkill.value=i,inputSkillsIcon.value=o,window.scrollTo(0,document.body.scrollHeight)},skillsFormHtml=function(){return'\n      <form id="edit-form">\n        <div>\n          <input type="text" name="skill" id="skill" placeholder="Skill" required>\n          <label for="skill">Skill</label>\n        </div>\n        <div>\n          <input type="text" name="icon" id="icon" placeholder="Icon" required>\n          <label for="icon">Icon</label>\n        </div>\n        <div class="form_buttons">\n          <input type="submit" value="Cancel" id="submit" class="btn" onclick="cancelForm(event)">\n          <input type="submit" value="Submit" id="submit" class="btn" \n          onclick="updateOrAdd(event, updateId, skillsUrl, skillsFetchObject, createSkills)"> \n        </div>\n        </form>\n  '},studiesHtml=function(e,t,n,i,o,r){return'\n      <div class="resume-item">\n        <h4>'.concat(t,"</h4>\n        <span>").concat(n,"</span><br>\n        <span>").concat(i," – ").concat("0000-00-00"==o?"Current":o,"</span>\n        <p>").concat(r,'</p>\n\n        <button class="btn delete" id="delete-').concat(e,'" value="delete" onclick="deletePost(').concat(e,', studiesUrl, createStudies)"><i class="fas fa-trash-alt fa-1x"></i></button>\n        <button class="btn update" id="update-').concat(e,'" value="update" onclick="initStudiesUpdate(').concat(e,')"><i class="fas fa-edit fa-1x"></i></button>\n      </div>\n    ')},studiesFetchObject=function(e){return e?{token:seshToken,id:e,title:inputStudiesTitle.value,institution:inputStudiesInstitution.value,date_start:inputStudiesStart.value,date_end:inputStudiesEnd.value,descr:inputStudiesDescr.value}:{token:seshToken,title:inputStudiesTitle.value,institution:inputStudiesInstitution.value,date_start:inputStudiesStart.value,date_end:inputStudiesEnd.value,descr:inputStudiesDescr.value}},initStudiesUpdate=function(t){updateId=t;var e=JSON.parse(localStorage.courses).findIndex(function(e){return e.id==t}),n=JSON.parse(localStorage.courses)[e],i=n.title,o=n.institution,r=n.date_start,a=n.date_end,l=n.descr;inputStudiesTitle.value=i,inputStudiesInstitution.value=o,inputStudiesStart.value=r,inputStudiesEnd.value=a,inputStudiesDescr.value=l,window.scrollTo(0,document.body.scrollHeight)},studiesFormHtml=function(){return'\n      <form id="edit-form">\n        <div>\n          <input type="text" name="title" id="title" placeholder="Title" required>\n          <label for="title">Title</label>\n        </div>\n        <div>\n          <input type="text" name="institution" id="institution" placeholder="Institution" required>\n          <label for="institution">Institution</label>\n        </div>\n        <div>\n          <input type="text" name="start-date" id="start-date" placeholder="Start Date" required>\n          <label for="start-date">Start Date</label>\n        </div>\n        <div>\n          <input type="text" name="end-date" id="end-date" placeholder="End Date" required>\n          <label for="end-date">End Date</label>\n        </div>\n        <div>\n          <input type="text" name="descr" id="descr" placeholder="Description" required>\n          <label for="descr">Description</label>\n        </div>\n        <div class="form_buttons">\n          <input type="submit" value="Cancel" id="submit" class="btn" onclick="cancelForm(event)">\n          <input type="submit" value="Submit" id="submit" class="btn" onclick="updateOrAdd(event, updateId, studiesUrl, studiesFetchObject, createStudies)"> \n        </div>\n      </form>\n  '},workHtml=function(e,t,n,i,o,r){return'\n      <div class="resume-item">\n        <h4>'.concat(t,"</h4>\n        <span>").concat(n,"</span><br>\n        <span>").concat(i," – ").concat("0000-00-00"==o?"Current":o,"</span>\n        <p>").concat(r,'</p>\n\n        <button class="btn delete" id="delete-').concat(e,'" value="delete" onclick="deletePost(').concat(e,', workUrl, createWork)"><i class="fas fa-trash-alt fa-1x"></i></button>\n        <button class="btn update" id="update-').concat(e,'" value="update" onclick="initWorkUpdate(').concat(e,')"><i class="fas fa-edit fa-1x"></i></button>\n      </div>\n    ')},workFetchObject=function(e){return e?{token:seshToken,id:e,company:inputWorkCompany.value,title:inputWorkTitle.value,date_start:inputWorkStart.value,date_end:inputWorkEnd.value,descr:inputWorkDescr.value}:{token:seshToken,company:inputWorkCompany.value,title:inputWorkTitle.value,date_start:inputWorkStart.value,date_end:inputWorkEnd.value,descr:inputWorkDescr.value}},initWorkUpdate=function(t){updateId=t;var e=JSON.parse(localStorage.jobs).findIndex(function(e){return e.id==t}),n=JSON.parse(localStorage.jobs)[e],i=n.company,o=n.title,r=n.date_start,a=n.date_end,l=n.descr;inputWorkCompany.value=i,inputWorkTitle.value=o,inputWorkStart.value=r,inputWorkEnd.value=a,inputWorkDescr.value=l,window.scrollTo(0,document.body.scrollHeight)},workFormHtml=function(){return'\n      <form id="edit-form">\n        <div>\n          <input type="text" name="company" id="company" placeholder="Company" required>\n          <label for="company">Company</label>\n        </div>\n        <div>\n          <input type="text" name="title" id="title" placeholder="Title" required>\n          <label for="title">Title</label>\n        </div>\n        <div>\n          <input type="text" name="start-date" id="start-date" placeholder="Start Date" required>\n          <label for="start-date">Start Date</label>\n        </div>\n        <div>\n          <input type="text" name="end-date" id="end-date" placeholder="End Date" required>\n          <label for="end-date">End Date</label>\n        </div>\n        <div>\n          <input type="text" name="descr" id="descr" placeholder="Description" required>\n          <label for="descr">Description</label>\n        </div>\n        <div class="form_buttons">\n          <input type="submit" value="Cancel" id="submit" class="btn" onclick="cancelForm(event)">\n          <input type="submit" value="Submit" id="submit" class="btn" onclick="updateOrAdd(event, updateId, workUrl, workFetchObject, createWork)"> \n        </div>\n      </form>\n  '};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
